// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuartzExample.Infrastructure.Data;

#nullable disable

namespace QuartzExample.Infrastructure.Migrations
{
    [DbContext(typeof(TicketDbContext))]
    partial class TicketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuartzExample.Domain.Aggregates.TicketAggregate.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("content");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("notes", (string)null);
                });

            modelBuilder.Entity("QuartzExample.Domain.Aggregates.TicketAggregate.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int")
                        .HasColumnName("assignee_id");

                    b.Property<DateTimeOffset?>("DeadLineDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deadline_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("QuartzExample.Domain.Aggregates.TicketAggregate.Note", b =>
                {
                    b.HasOne("QuartzExample.Domain.Aggregates.TicketAggregate.Ticket", null)
                        .WithMany("Notes")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("QuartzExample.Domain.ValueObject.AuditAction", "Created", b1 =>
                        {
                            b1.Property<int>("NoteId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("At")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("created_at");

                            b1.Property<int>("ByUserId")
                                .HasColumnType("int")
                                .HasColumnName("created_by");

                            b1.HasKey("NoteId");

                            b1.ToTable("notes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");
                        });

                    b.OwnsOne("QuartzExample.Domain.ValueObject.AuditAction", "Modified", b1 =>
                        {
                            b1.Property<int>("NoteId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("At")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("modified_at");

                            b1.Property<int>("ByUserId")
                                .HasColumnType("int")
                                .HasColumnName("modified_by");

                            b1.HasKey("NoteId");

                            b1.ToTable("notes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");
                        });

                    b.Navigation("Created")
                        .IsRequired();

                    b.Navigation("Modified");
                });

            modelBuilder.Entity("QuartzExample.Domain.Aggregates.TicketAggregate.Ticket", b =>
                {
                    b.OwnsOne("QuartzExample.Domain.ValueObject.AuditAction", "Created", b1 =>
                        {
                            b1.Property<int>("TicketId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("At")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("created_at");

                            b1.Property<int>("ByUserId")
                                .HasColumnType("int")
                                .HasColumnName("created_by");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("QuartzExample.Domain.ValueObject.AuditAction", "Modified", b1 =>
                        {
                            b1.Property<int>("TicketId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("At")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("modified_at");

                            b1.Property<int>("ByUserId")
                                .HasColumnType("int")
                                .HasColumnName("modified_by");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.Navigation("Created")
                        .IsRequired();

                    b.Navigation("Modified");
                });

            modelBuilder.Entity("QuartzExample.Domain.Aggregates.TicketAggregate.Ticket", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
